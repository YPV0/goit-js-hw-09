{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACMC,EAAOC,SAASC,cAAc,SACpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GACFX,EAAAe,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,OAC3DE,EAAM,CAAEH,WAAUC,YAEpBP,EAAAe,OAAOG,QAAQ,sBAAqCD,OAAfX,EAAS,QAAYW,OAANV,EAAM,OAC1DG,EAAO,CAAEJ,WAAUC,U,GAEpBA,E,IAgBPL,EAAKiB,iBAAiB,UAZtB,SAAsBC,GACpBA,EAAMC,iBAMN,IAJA,IAAMd,EAAQe,OAAOpB,EAAKqB,SAAShB,MAAMiB,OACnCC,EAAOH,OAAOpB,EAAKqB,SAASE,KAAKD,OACjCE,EAASJ,OAAOpB,EAAKqB,SAASG,OAAOF,OAElCG,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAC/BtB,EAAcsB,EAAI,EAAGpB,EAAQoB,EAAIF,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\nconst form = document.querySelector('.form');\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        resolve({ position, delay });\n      } else {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const delay = Number(form.elements.delay.value);\n  const step = Number(form.elements.step.value);\n  const amount = Number(form.elements.amount.value);\n\n  for (let i = 0; i < amount; i += 1) {\n    createPromise(i + 1, delay + i * step);\n  }\n}\n\nform.addEventListener('submit', handleSubmit);\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","Notify","success","concat","failure","addEventListener","event","preventDefault","Number","elements","value","step","amount","i"],"version":3,"file":"03-promises.852d6722.js.map"}